#! /bin/bash

# This is my take on the cloudshell_lcd script found at https://github.com/mdrjr/cloudshell_lcd/.
#
# It is tailored for Arch Linux, but should probably run under any sufficiently modern
# distribution that uses systemd.
#
# Requires: curl, bc, con2fbmap (available at https://aur.archlinux.org/packages/con2fbmap)
# Optional: nfs-utils, samba, netatalk

export LANG="en_US.UTF-8"

# CONSOLE_FONT="Lat15-Fixed18"
CONSOLE_FONT="lat9u-16 -m 8859-1"

# Network Interface: eth0, wlan0, ....
NETIF="eth0"

# SATA HDD mount
SATA="/dev/root"

# Screen refresh in seconds
REFRESH=${CLOUDSHELL_REFRESH:-5}

# CPU Temperature in C or F
TEMPERATURE_FORMAT="F" # So sue me, I'm a philistine

# Number of screens to cycle through
MAX_SCREENS=2

# External IP Refresh counts
# The time to update the ip in counts is acquired by using the following formula
# seconds_to_refresh = EXT_IP_REFRESH * MAX_SCREENS * REFRESH
EXT_IP_REFRESH="100"

# tput requires a tty, so we have to fake it, code based on http://stackoverflow.com/a/20401674
function faketty { script -qfc "$(printf "%q " "$@")" /dev/null ; }

# Colors used in the output
COFF=$(faketty tput sgr0)
CGREEN=$(faketty tput setaf 2)
CRED=$(faketty tput setaf 1)
CBLUE=$(faketty tput setaf 6)

CURRENT_SCREEN=0

ext_ip_refresh_c=0
# this allows testing by outputting directly to the current TTY if no console is specified
oc=$([ -n "$CLOUDSHELL_CONSOLE" ] && echo "/dev/tty$CLOUDSHELL_CONSOLE" || echo $(tty))

# output unicode char by codepoint, code based on http://stackoverflow.com/a/16509364
function unichr {
    function _fast_chr {
        local __octal
        local __char
        printf -v __octal '%03o' $1
        printf -v __char \\$__octal
        REPLY=$__char
    }
    if [[ $LANG == "C" ]]; then
        echo -n " "
    else
        local c=$1  # ordinal of char
        local l=0   # byte ctr
        local o=63  # ceiling
        local p=128 # accum. bits
        local s=''  # output string

        (( c < 0x80 )) && { _fast_chr "$c"; echo -n "$REPLY"; return; }

        while (( c > o )); do
            _fast_chr $(( t = 0x80 | c & 0x3f ))
            s="$REPLY$s"
            (( c >>= 6, l++, p += o+1, o>>=1 ))
        done

        _fast_chr $(( t = p | c ))
        echo -n "$REPLY$s"
    fi
}

# in case HDMI monitor is plugged in, choose the right frame buffer
if [ -n "$CLOUDSHELL_CONSOLE" ]; then
    con2fbmap $CLOUDSHELL_CONSOLE $(fbset -fb /dev/fb0 -i | egrep '^\s+Name\s+: fb_ili9340$' 2>&1 > /dev/null && echo 0 || echo 1)
fi

function get_external_ip {
    EXTERNAL_IP=$(/usr/bin/curl -s http://eth0.me)
#     EXTERNAL_IP=$(/usr/bin/curl -s http://mdrjr.net/ip.php)
}

function get_full_date { echo $(date +"%Y-%m-%d %H:%M:%S"); }

function get_hostname { echo $(hostname); }

function get_internal_ip { echo $(hostname -i | cut -d' ' -f1); }
#
# sar causes my auto-mounts to be mounted all of the time, so I don't like it...
function netstats {
    r1=$(cat /sys/class/net/$1/statistics/rx_bytes)
    t1=$(cat /sys/class/net/$1/statistics/tx_bytes)
    sleep $2
    r2=$(cat /sys/class/net/$1/statistics/rx_bytes)
    t2=$(cat /sys/class/net/$1/statistics/tx_bytes)
    tk=$(echo "scale=2; ($t2 - $t1) / 1024" | bc)
    rk=$(echo "scale=2; ($r2 - $r1) / 1024" | bc)
    echo $tk $rk
}

function get_net_tx_rx_realtime {
#    net_txrx=$(sar -n DEV 1 1 | grep $NETIF | tail -n 1 | gawk '{print $5" "$6}')
    # in MB/s
    net_txrx=$(netstats $NETIF 1)
    _tx=$(echo $net_txrx | awk '{printf $1}')
    _rx=$(echo $net_txrx | awk '{printf $2}')
    NET_TX=$(echo "scale=2; x=$_tx/1024; if(x<1) print 0; x" | bc)
    [ "$NET_TX" == "00" ] && NET_TX="0.00"
    NET_RX=$(echo "scale=2; x=$_rx/1024; if(x<1) print 0; x" | bc)
    [ "$NET_RX" == "00" ] && NET_RX="0.00"
}

function get_disk_info {
    t=$(df -h | grep $SATA)
    DISK_SIZE=$(echo $t | awk '{printf $2}')
    DISK_USED=$(echo $t | awk '{printf $3}')
    DISK_FREE=$(echo $t | awk '{printf $4}')
    DISK_USED_PCT=$(echo $t | awk '{printf $5}')
}

function get_memory_info {
    # in Mbytes
    MEM_FREE=$[$(cat /proc/meminfo | grep MemFree | awk '{print $2}') / 1024]
    MEM_TOTAL=$[$(cat /proc/meminfo | grep MemTotal | awk '{print $2}') / 1024]
    MEM_USED=$[$MEM_TOTAL - $MEM_FREE]
}

function get_cpu_usage {
    cpufree=$(mpstat 1 1 | tail -n 1 | awk '{printf $12}')
    CPU_USAGE=$(echo "scale=2; x=100-$cpufree; if(x<1) print 0; x" | bc)
    [ "$CPU_USAGE" == "00" ] && CPU_USAGE="0.00"
    echo $CPU_USAGE
}

function get_cpu_temperature {
    _t=$[$(cat /sys/class/thermal/thermal_zone0/temp) / 1000]
    if [ "$TEMPERATURE_FORMAT" = "C" ]; then
        echo "$_t$(unichr 0x00B0)C"
    else
        _t1=$[ $_t * 9 / 5 + 32 ]
        echo "$_t1$(unichr 0x00B0)F"
    fi
}

function get_samba_connections {
     if [ ! -f /usr/bin/smbstatus ]; then
         SAMBA_CONNECTIONS=0
     else
         SAMBA_CONNECTIONS=$(smbstatus -b | grep -c ipv)
     fi
     echo $SAMBA_CONNECTIONS
}

function get_afp_connections {
     if [ ! -f /usr/bin/afpstats ]; then
         AFP_CONNECTIONS=0
     else
         AFP_CONNECTIONS=$(afpstats | wc -l)
     fi
     echo $AFP_CONNECTIONS
}

function get_nfs_connections { echo $(netstat -an | grep 2049 | grep -c ESTA); }

function get_process_count { echo $(ps xa | wc -l); }

function screen0 {
    # check if EXT_IP_REFRESH
    if (( ($ext_ip_refresh_c % $EXT_IP_REFRESH) == 0 )); then
        get_external_ip
    fi

    # increment $ext_ip_refresh_c
    ext_ip_refresh_c=$[$ext_ip_refresh_c+1]

    # get data
    get_disk_info
    get_net_tx_rx_realtime
    get_memory_info

    # line CPU Usage
    results="    CPU Usage: $CBLUE$(get_cpu_usage)%$COFF CPU Temp: $CBLUE$(get_cpu_temperature)$COFF\n"
    # Line Memory
    results+="    Memory Free: $CBLUE$MEM_FREE MB$COFF Used: $CBLUE$MEM_USED MB$COFF\n"
    # Line IP Addresses
    results+="    IP: $CBLUE$(get_internal_ip)$COFF Rem: $CBLUE$EXTERNAL_IP$COFF\n"
    # Line network usage
    results+="    TX: $CBLUE$NET_TX MB/s$COFF RX: $CBLUE$NET_RX MB/s$COFF\n"
    # Line Disk Space
    results+="    Root Disk: $CBLUE$DISK_USED$COFF ($CBLUE$DISK_USED_PCT$COFF) Free: $CBLUE$DISK_FREE$COFF\n"
    results+="\n"

    # Line Netatalk
    systemctl list-unit-files | egrep '^netatalk.service' > /dev/null
    if [ $? -eq 0 ]; then
        results+="         $(systemctl is-active netatalk.service > /dev/null && echo $CGREEN || echo $CRED)$(unichr 0x00a7)$COFF"
        results+=" Netatalk Clients: $CBLUE$(get_afp_connections)$COFF\n"
    fi
    # Line Samba
    systemctl list-unit-files | egrep '^smbd.service' > /dev/null
    if [ $? -eq 0 ]; then
        results+="         $(systemctl is-active smbd.service > /dev/null && echo $CGREEN || echo $CRED)$(unichr 0x00a7)$COFF"
        results+=" Samba Clients: $CBLUE$(get_samba_connections)$COFF\n"
    fi
    # line NFS
    systemctl list-unit-files | egrep '^nfs-server.service' > /dev/null
    if [ $? -eq 0 ]; then
        results+="         $(systemctl is-active nfs-server.service > /dev/null && echo $CGREEN || echo $CRED)$(unichr 0x00a7)$COFF"
        results+=" NFS Connections: $CBLUE$(get_nfs_connections)$COFF\n"
    fi
    results+="\n"

    # line Processes
    results+="    Processes Running: $CBLUE$(get_process_count)$COFF"
    echo -e "$results"
}

function attachedCapacity {
    cap=$(cat /proc/partitions | egrep 'sd[a-z]$' | awk '{s += $3} END {print s}')
    if [ $cap -lt $[ 1024 * 1024 ] ]; then
        cap=$(echo "scale=2; $cap/1024" | bc)
        cap="$cap MB"
    elif [ $cap -lt $[ 1024 * 1024 * 1024 ] ]; then
        cap=$(echo "scale=2; $cap/1024/1024" | bc)
        cap="$cap GB"
    else
        cap=$(echo "scale=2; $cap/1024/1024/1024" | bc)
        cap="$cap TB"
    fi
    echo $cap
}

function screen1 {
    results="  Attached Drives: $CBLUE$(cat /proc/partitions | egrep 'sd[a-z]$' | wc -l)$COFF"
    results+=" Capacity $CBLUE$(attachedCapacity)$COFF\n"
    results+="      Partitions Mounted: $CBLUE$(df -h | grep /dev/sd | wc -l)$COFF of $CBLUE$(cat /proc/partitions | egrep 'sd[a-z][0-9]+$' | wc -l)$COFF\n"
    results+="\n"
    # df -h | grep /dev/sd | head -8 | awk '{printf "%-15.15s %4s / %4s free (%4s)\n", $6, $4, $2, $5}'

    while read -r line; do
        IFS=';' read -r -a array <<< "$line"
        percent=${array[3]}
        [ ${percent%\%} -le 75 ] && results+="$CGREEN" || results+="$CRED"
        results+=$(printf "%4s$COFF " "${array[3]}")
        results+=$(printf "%-17.17s $CBLUE%4s$COFF / $CBLUE%4s$COFF free" "${array[0]}" "${array[1]}" "${array[2]}")

        results+="\n"
    done <<< "$(df -h | grep /dev/sd | head -8 | awk '{printf "%s;%s;%s;%s\n", $6, $4, $2, $5}')"

    # offset extra sleep caused by screen0 calculating network and cpu statistics
    sleep 2
    echo -e "$results"
}

if [ -n "$CLOUDSHELL_CONSOLE" ]; then
    # Ensure that we are in the right TTY
    chvt $CLOUDSHELL_CONSOLE

    # font setup
    setfont -C $oc $CONSOLE_FONT > $oc

    # prevent screen sleep on virtual console
    setterm --blank 0 --powersave off --blink off --cursor off > $oc
fi

# infinite loop
while true; do

    # Ensure that we are in the right TTY
# I sometimes run dual headed, so I don't want this changing on me
#     chvt $CLOUDSHELL_CONSOLE


    output="\n"
    output+="      $CBLUE$(get_hostname) $COFF: $(get_full_date)\n"
    output+="\n"

    if [ $CURRENT_SCREEN == 0 ]; then
        output+=$(screen0)
    elif [ $CURRENT_SCREEN == 1 ]; then
        output+=$(screen1)
    fi
    CURRENT_SCREEN=$[ ( $CURRENT_SCREEN + 1 ) % $MAX_SCREENS ]

    # clear and output updated stats
    [ -n "$CLOUDSHELL_CONSOLE" ] && clear > $oc || echo "----------------------------------------" > $oc
    echo -e "$output" > $oc
    [ -z "$CLOUDSHELL_CONSOLE" ] && [ $CURRENT_SCREEN == 0 ] && break
    [ -n "$CLOUDSHELL_CONSOLE" ] && sleep $REFRESH
done
